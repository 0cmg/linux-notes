第十一章、认识与学习 BASH

------------------------------------------------------------------
bash                                    Bourne Again SHell

bash 的优点:
●命令编修能力                          能记忆使用过的指令,记录在 ~/.bash_history 中 History
●命令与档案补全功能                    tab 键能补全命令或档案名
●命令别名设定功能                      给命令起别名 Alias
●工作配置、前景背景配置                Job Control,Foreground,Background
●程序化脚本                            Shell Scripts
●通配符                                Wildcard
------------------------------------------------------------------
常见的 shells:
●/bin/sh                               已经被 bash 取代
●/bin/bash                             Linux 预设的 shell
●/bin/ksh                              Kornshell 由 AT&T 贝尔实验实发展出来的,兼容于 bash
●/bin/tcsh                             整合 C Shell,提供更多的功能
●/bin/csh                              已经被 /bin/tcsh 所取代
●/bin/zsh                              基于 ksh 发展出来的功能更强大的 shell
------------------------------------------------------------------
变量的设定规则:
●变量与变量内容以一个等号连接
●等号两边不能有空格
●变量名称只能为英文与数字,开头字母不能为数字
●如果变量内容有空格可以使用单引号或双引号
●双引号会解析变量内容中的变量
●单引号直接输出字符串
●可用 [ \ ] 将特殊字符变为一般字符
●在指令中可用 [ `指令` ] 或 [ $(指令) ] 来使用其他指令 
●变量累加内容可用 [ PATH="$PATH":/home/bin ] 或 [ PATH="${PATH}":/home/bin ]
●变量需要在其他子程序执行时要用 [ export ] 使变量成为环境变量
●通常大写字符为系统默认变量,小写字符为自定义变量
●取消变量使用 [ unset ]
------------------------------------------------------------------
环境变量:
●HOME                                  用户家目录
●SHELL                                 当前环境使用的 shell 是哪支程序
●HISTSIZE                              指令历史记录记录数量
●MAIL                                  当前用户邮箱目录
●PATH                                  执行文件搜寻路径,类似于 Windows 的环境变量
●LANG                                  语系
●RANDOM                                随机数

重要变量:
●PS1                                   提示字符设定
●$                                     当前 shell 线程号(PID),查看方法 [ echo $$ ]
●●                                     上个指令回传值,返回 0 表示执行成功,查看方法 [ echo $● ]
●OSTYPE, HOSTTYPE, MACHTYPE            主机硬件与核心的等级
------------------------------------------------------------------
指令运作的顺序:
●以相对/绝对路径执行指令,例如 [ /bin/ls ] 或 [ ./ls ]
●由 alias 找到指令来执行
●由 bash 内建的(builtin)指令来执行
●透过 $PATH 这个变量的顺序搜寻到的第一个指令来执行

查看某命令的执行顺序可以使用 [ type -a 命令 ]
------------------------------------------------------------------
/etc/issue                              bash 进站信息                           
/etc/issue.net                          telnet 远程连接主机时的进站信息         在管线命令当中，常常会使用刡前一个挃令癿 stdout 作为这次癿 stdin ， 某些挃令需要用刡文件名 (例如 tar) 杢迚行处理时，该 stdin 不 stdout 可以刟用减号 "-" 杢替代
/etc/motd                               登入后显示信息
------------------------------------------------------------------
login shell                             需要登录来取得的 shell
non-login shell                         不需要登录
------------------------------------------------------------------
login shell 会读取的环境配置文件在管线命令当中，常常会使用刡前一个挃令癿 stdout 作为这次癿 stdin ， 某些挃令需要用刡文件名 (例如 tar) 杢迚行处理时，该 stdin 不 stdout 可以刟用减号 "-" 杢替代
●/etc/profile                          用户登录取得 bash 时一定会读取的配置文件
●/etc/inputrc                          用户自定义热键
●/etc/profile.d/*.sh                   设置一些不同分类的全局环境设置,此目录下拥有 [ r ] 权限的 .sh 文件都会被 /etc/profile 呼叫
●/etc/sysconfig/i18n                   决定 bash 预设使用何种语系的配置文件
●个人偏好配置文件主要有三个, login shell 只会读取其中一个,依次为:
  ●~/.bash_profile
  ●~/.bash_login
  ●~/.profile
------------------------------------------------------------------
non-login shell 会读取的环境配置文件
●~/.bashrc                               在管线命令当中，常常会使用刡前一个挃令癿 stdout 作为这次癿 stdin ， 某些挃令需要用刡文件名 (例如 tar) 杢迚行处理时，该 stdin 不 stdout 可以刟用减号 "-" 杢替代
------------------------------------------------------------------
其他配置文件:
●/etc/man.config                       规范了 man page 的路径
●~/.bash_history                       记录历史命令
●~/.bash_logout                        用户注销 bash 后系统执行的动作
------------------------------------------------------------------
使用 [ stty -a ] 命令列出目前环境中所有的按键列表:
●eof                                   End of file 的意思,代表结束输入
●erase                                 向后删除字符
●intr                                  送出一个 interrupt (中断)的讯号给目前正在 run 的程序
●kill                                  删除在目前指令列上的所有文字
●quit                                  送出一个 quit 的讯号给目前正在 run 的程序
●start                                 在某个程序停止后,重新启动他的 output
●stop                                  停止目前屏幕的输出
●susp                                  送出一个 terminal stop 的讯号给正在 run 的程序
------------------------------------------------------------------
bash 常用组合键:
^+C                                     终止目前命令
^+D                                     输入结束 EOF
^+M                                     回车
^+S                                     暂停屏幕输出
^+Q                                     恢复屏幕输出
^+U                                     在提示符下将整列命令删除
^+Z                                     暂停当前命令
------------------------------------------------------------------
通配符(wildcard):
●*                                     代表 0 到无穷多个任意字符
●?                                     代表一定有一个任意字符
●[]                                    代表一定有一个在括号内的字符
●[-]                                   代表在编码顺序中的任意字符,如 [0-9] 表示 0 到 9 的所有数字
●[^]                                   如果括号中的第一个字符为指数符号(^),表示反向选择
------------------------------------------------------------------
bash 环境中的特殊符号
●#                                     批注符号,注释
●\                                     跳脱符号,将特殊字符或通配符还原为一般字符
●|                                     管线,分隔两条管线命令的界定
●;                                     连续指令下达分隔符
●~                                     用户家目录
●$                                     变量前导符,使用变量时变量前必须加 $
●&                                     工作控制,将指令变为背景执行
●!                                     逻辑非
●/                                     目录符号,路径分隔的符号
●>                                     数据流重导向,取代
●>>                                    数据流重导向,累加
●<                                     数据流重导向,输入
●<<                                    数据流重导向,结束的输入字符
●''                                    单引号,不具有变量置换的功能
●""                                    双引号,具有变量置换的功能
●`指令`                                中间为先执行的指令
●$(指令)                               同 [ `指令` ]
●(指令)                                中间为子 shell 起始与结束
●{指令}                                中间为命令区块的组合
------------------------------------------------------------------
标准输入                                代码为 0,使用 < 或 <<, stdin
标准输出                                代码为 1,使用 > 或 >>, stdout
标准错误输出                            代码为 2,使用 > 或 >>, stderr

/dev/null                               垃圾筒黑洞装置
------------------------------------------------------------------
命令执行的判断依据:
●&&                                    指令1 && 指令2 表示当指令1执行成功后执行指令2
●||                                    指令1 || 指令2 表示当指令1执行失败后执行指令2
------------------------------------------------------------------
管线命令:
●管线命令仅会处理 standard output，对于 standard error output 会予以忽略
●管线命令必须要能够接受来自前一个指令的数据成为 standard input 继续处理才行

减号 [ - ] 的用途:
在管线命令中常常会使用前一个指令的 stdout 作为这次的 stdin, 某些指令需要用到文件名来进行处理时,该 stdin 与 stdout 可以用减号来代替
------------------------------------------------------------------
type                                    判断一个命令是否是内置命令
echo                                    显示文字,如变量、字符串或数字
env                                     查看环境变量与常见环境变量说明 Environment
export                                  export 类似 env,并可实现自定义变量转换为环境变量
set                                     查看所有变量,包括环境变量与自定义变量,并可设定指令输入/输出的环境
locale                                  语系变量
read                                    读取键盘输入的变量
declare                                 声明变量类型 同 [ typeset ]
typeset                                 声明变量类型,同 [ declare ]
ulimit                                  限制用户的某些系统资源
clear                                   清除屏幕
alias                                   命令别名
unalias                                 取消命令别名
history                                 指令历史记录
source                                  读入环境配置文件的指令,也可以使用 [ . ~/.bashrc ]
stty                                    设置终端机环境 Setting tty
last                                    显示用户登录情况
cut                                     将信息的某一段切出来,处理的信息以行为单位
grep                                    分析一行信息,若有需要的信息便将此行取出
sort                                    依据不同的数据型态排序
uniq                                    将重复的数据合并为一条
wc                                      计算输出信息的整体数据
tee                                     双向重导向,会同时将数据流分送到档案与屏幕
tr                                      删除信息中的文字,或是文字信息的转换
col                                     过滤控制字符
join                                    处理两个相关档案之间的数据
paste                                   将多个档案的内容合并
expand                                  将制表符转换成空白字符
unexpand                                将空白字符转换成制表符
split                                   将一个大档案分割为若干个小档案
xargs                                   给命令传递参数的一个过滤器,也是组合多个命令的一个工具
finger                                  查找并显示用户信息
